name: Web Deploy (Flutter â†’ VPS)

on:
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build:
    name: Build Flutter Web
    runs-on: ubuntu-latest
    env:
      # Single sources of truth
      API_BASE_URL:   ${{ secrets.API_BASE_URL }}     # e.g. https://api.nutshellnewsapp.com
      SHARE_BASE_URL: ${{ secrets.SHARE_BASE_URL }}   # e.g. https://app.nutshellnewsapp.com
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate build secrets
        shell: bash
        run: |
          set -euo pipefail
          for v in API_BASE_URL SHARE_BASE_URL; do
            val="${!v:-}"
            if [ -z "$val" ]; then
              echo "::error title=Missing secret::$v is not set"; exit 1
            fi
            if ! printf '%s' "$val" | grep -Eq '^https?://'; then
              echo "::error title=Bad URL::$v must start with http(s)://"; exit 1
            fi
          done

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: "3.35.6"

      - name: Cache pub packages
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: pub-cache-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            pub-cache-${{ runner.os }}-

      - name: flutter pub get
        run: flutter pub get

      - name: Compute renderer arg (html if supported)
        id: args
        shell: bash
        run: |
          if flutter build web -h | grep -q -- '--web-renderer'; then
            echo "arg=--web-renderer html" >> "$GITHUB_OUTPUT"
          else
            echo "arg=" >> "$GITHUB_OUTPUT"
          fi

      - name: Build (with single-source bases)
        env:
          API_NORM:   ${{ secrets.API_BASE_URL }}
          SHARE_NORM: ${{ secrets.SHARE_BASE_URL }}
        shell: bash
        run: |
          set -euo pipefail
          api="${API_NORM%/}"
          share="${SHARE_NORM%/}"

          flutter build web --release \
            ${{ steps.args.outputs.arg }} \
            --pwa-strategy=none \
            --dart-define=API_BASE_URL="$api" \
            --dart-define=SHARE_BASE_URL="$share" \
            --dart-define=DEEP_LINK_BASE="$share"

          # Stamp build metadata (avoid jq dependency)
          mkdir -p build/web
          cat > build/web/version.json <<EOF
          {
            "commit": "${GITHUB_SHA}",
            "built_at": "$(date -u +%FT%TZ)",
            "api_base": "${api}",
            "share_base": "${share}"
          }
          EOF

      - name: Upload web build
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: build/web

  deploy:
    name: Deploy to VPS
    needs: build
    runs-on: ubuntu-latest
    env:
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}   # raw OpenSSH private key
      VPS_HOST:        ${{ secrets.VPS_HOST }}          # e.g. 72.60.218.209
      VPS_USER:        ${{ secrets.VPS_USER }}          # e.g. root (or a sudo user)
      SSH_PORT:        ${{ secrets.SSH_PORT }}          # optional (defaults to 22)
      WEB_ROOT:        ${{ secrets.WEB_ROOT }}          # optional (default below)
      SHARE_BASE_URL:  ${{ secrets.SHARE_BASE_URL }}    # for smoke tests
    steps:
      - name: Download build
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: build/web

      - name: Validate deploy vars
        shell: bash
        run: |
          set -euo pipefail
          : "${SHARE_BASE_URL:?SHARE_BASE_URL is required}"
          if ! printf '%s' "$SHARE_BASE_URL" | grep -Eq '^https?://'; then
            echo "::error title=Bad URL::SHARE_BASE_URL must start with http(s)://"; exit 1
          fi

      - name: Prepare SSH
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          printf '%s\n' "${SSH_PRIVATE_KEY}" > ~/.ssh/id_vps
          sed -i 's/\r$//' ~/.ssh/id_vps
          chmod 600 ~/.ssh/id_vps

          : "${SSH_PORT:=22}"
          : "${WEB_ROOT:=/var/www/nutshellnewsapp_web}"

          ssh-keyscan -p "${SSH_PORT}" -H "${VPS_HOST}" >> ~/.ssh/known_hosts
          ssh -i ~/.ssh/id_vps -o BatchMode=yes -p "${SSH_PORT}" "${VPS_USER}@${VPS_HOST}" true

          {
            echo "SSH_PORT=${SSH_PORT}"
            echo "WEB_ROOT=${WEB_ROOT}"
          } >> "$GITHUB_ENV"

      - name: Ensure target dir exists
        run: ssh -i ~/.ssh/id_vps -p "${SSH_PORT}" "${VPS_USER}@${VPS_HOST}" "mkdir -p '${WEB_ROOT}'"

      - name: Rsync to VPS
        shell: bash
        run: |
          sudo apt-get update -y && sudo apt-get install -y rsync
          rsync -avz --delete \
            --chmod=D2755,F644 \
            -e "ssh -i ~/.ssh/id_vps -p ${SSH_PORT}" \
            build/web/ "${VPS_USER}@${VPS_HOST}:${WEB_ROOT}/"

      - name: Set perms + reload nginx
        run: |
          ssh -i ~/.ssh/id_vps -p "${SSH_PORT}" "${VPS_USER}@${VPS_HOST}" \
            "chown -R www-data:www-data '${WEB_ROOT}' || true; \
             (systemctl reload nginx || service nginx reload || true)"

      - name: Smoke test (HEAD)
        shell: bash
        run: |
          set -euo pipefail
          url="${SHARE_BASE_URL%/}"
          echo "HEAD $url"
          curl -fsS -I "$url" | sed -n '1,15p'

      - name: Smoke test (version.json)
        shell: bash
        run: |
          set -euo pipefail
          url="${SHARE_BASE_URL%/}/version.json"
          echo "GET $url"
          curl -fsS "$url" | sed -n '1,80p'
