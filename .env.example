#################################
# ---------- Core ----------
#################################

ENV=prod
TZ=Asia/Kolkata
LOG_LEVEL=INFO
LANG=C.UTF-8
PYTHONUNBUFFERED=1

#################################
# ---------- Storage / Queues ----------
# Redis is required. DATABASE_URL is optional (Postgres not currently used in this pipeline).
#################################

DATABASE_URL=postgresql+psycopg://postgres:postgres@db:5432/cinepulse
REDIS_URL=redis://redis:6379/0

# Final public feed list in Redis (sanitizer is the ONLY writer,
# api reads this for /v1/feed)
FEED_KEY=feed:items

# Set of canonical signatures we've already ACCEPTED.
# Used by sanitizer to drop future dupes.
SEEN_KEY=feed:seen_signatures

# Hard cap for FEED_KEY length. Sanitizer trims after insert.
# Set <=0 to disable trimming.
MAX_FEED_LEN=200

# Realtime fanout keys (sanitizer publishes when it ACCEPTS a new story)
FEED_PUBSUB=feed:pub
FEED_STREAM=feed:stream
FEED_STREAM_MAXLEN=5000

# Push notification fanout:
# If set to 1/true/yes, sanitizer enqueues push jobs to the "push" RQ queue.
# Turn this on only when you have a push worker wired to FCM.
ENABLE_PUSH_NOTIFICATIONS=0

# Backfill / maintenance helpers (used only by manual repair tools,
# not in the live ingest path)
REPAIR_IF_MISSING_IMAGE=1
REPAIR_SCAN=250
REPAIR_BY_URL=1

# Optional: API can filter feed results by industry tag if you want
# to expose only one regional vertical (e.g. bollywood-only feed)
FEED_ALLOWED_INDUSTRIES=bollywood

#################################
# ---------- API pagination / rate limits ----------
#################################

BATCH_SIZE=200
RL_FEED_PER_MIN=120
RL_SEARCH_PER_MIN=90
RL_STORY_PER_MIN=240

#################################
# ---------- Summarizer knobs ----------
# These control how workers build story.summary.
#################################

SUMMARY_TARGET_WORDS=85
SUMMARY_MIN_WORDS=60
SUMMARY_MAX_WORDS=110

# If the cleaned body text is short enough, we passthrough it instead of
# doing multi-sentence selection. Limits for that passthrough mode:
SUMMARY_PASSTHROUGH_MAX_WORDS=120
SUMMARY_PASSTHROUGH_MAX_CHARS=900

#################################
# ---------- Observability ----------
#################################

SENTRY_DSN_BACKEND=

#################################
# ---------- External APIs / Keys ----------
#################################

YOUTUBE_API_KEY=
TMDB_API_KEY=
OMDB_API_KEY=
FCM_SERVER_KEY=

#################################
# ---------- Service URLs / CORS / Deep Links ----------
#################################

# Public base(s) that consume /v1/feed etc. (CSV)
API_PUBLIC_BASE_URL=https://cinepulse.netlify.app,http://localhost:5173

# How internal services talk to the api container
API_INTERNAL_BASE_URL=http://api:8000

# If you have a renderer/microservice
RENDERER_URL=http://renderer:8000

# Comma-separated allowed origins (no spaces).
# These should match where your frontend(s) actually run.
CORS_ORIGINS=https://cinepulse.netlify.app,http://localhost:5173

# Base for deep links to stories in the client app
DEEP_LINK_BASE=https://cinepulse.netlify.app/#/s

#################################
# ---------- Scheduler / Ingestion ----------
#
# scheduler runs in its own container and is responsible for polling sources.
#
# Flow:
# - scheduler calls rss_poll() / youtube_rss_poll()
# - those enqueue normalize_event jobs into the "events" RQ queue
# - workers consume "events", normalize, and enqueue each story to "sanitize"
# - sanitizer consumes "sanitize", dedupes, and publishes to the feed
#
#################################

# If true, scheduler will try /app/infra/source.yml for source lists / throttles.
# If no usable sources in YAML, it'll fall back to YT_CHANNELS / RSS_FEEDS below.
USE_SOURCES_FILE=true

# YouTube channel IDs to poll (fallback if source.yml doesn't give channels)
YT_CHANNELS=UCq-Fj5jknLsUf-MWSy4_brA,UCI5q9xeOp2-1bV7xEtkKgzA,UCQ7oCq4qjTLnkaW3r4U1H0g,UCwo9ey4fQ8h0c8rQ2n2-2sw

# RSS feeds to poll (fallback if source.yml doesn't give feeds)
# Format per entry: URL|kind_hint
RSS_FEEDS=https://www.bollywoodhungama.com/rss/news.xml|news,https://www.filmcompanion.in/feed|news,https://www.pinkvilla.com/entertainment/feed|news,https://www.koimoi.com/feed/|news,https://www.tellyupdates.com/feed/|news

# How often one full poll cycle runs (minutes).
# Required unless provided in source.yml under scheduler.poll_interval_min
POLL_INTERVAL_MIN=5

# Freshness window in hours. Scheduler will ignore items older than this.
# Required unless provided in source.yml under scheduler.published_after_hours
PUBLISHED_AFTER_HOURS=1

# Delay (seconds) between polling each source in a single cycle.
# Helps avoid hammering multiple feeds back-to-back.
POLL_SPREAD_SEC=2.0

# Extra random jitter (seconds) that gets added to the sleep between cycles.
# Helps avoid aligning perfectly to the same wall clock time forever.
POLL_JITTER_SEC=10

# Hard caps per-source per poll. If a feed/channel doesn't override,
# scheduler will use these values.
YT_MAX_ITEMS=50
RSS_MAX_ITEMS=200

# If true, scheduler exits after one cycle instead of looping forever.
ONE_SHOT=false

# Feature flags for ingestion
ENABLE_YOUTUBE_INGEST=true
ENABLE_RSS_INGEST=true
ENABLE_TMDB_INGEST=true
