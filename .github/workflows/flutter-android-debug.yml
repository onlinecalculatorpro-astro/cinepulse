name: Android Debug (APK - manual)

on:
  workflow_dispatch:
    inputs:
      apiBase:
        description: "API base URL (e.g. https://api.onlinecalculatorpro.org)"
        required: false
        default: ""
      deepLinkBase:
        description: "Deep link base (e.g. https://cinepulse.netlify.app/#/s)"
        required: false
        default: ""
      applicationId:
        description: "Android applicationId / package (must match google-services.json)"
        required: false
        default: "api.onlinecalculatorpro.cinepulse"

env:
  API_BASE_URL: ${{ secrets.API_BASE_URL || inputs.apiBase || 'https://api.onlinecalculatorpro.org' }}
  DEEP_LINK_BASE: ${{ secrets.DEEP_LINK_BASE || inputs.deepLinkBase || 'https://cinepulse.netlify.app/#/s' }}
  APPLICATION_ID: ${{ secrets.ANDROID_APPLICATION_ID || inputs.applicationId || 'api.onlinecalculatorpro.cinepulse' }}
  FIREBASE_GOOGLE_SERVICES_JSON: ${{ secrets.FIREBASE_GOOGLE_SERVICES_JSON }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    concurrency:
      group: android-debug-${{ github.ref_name }}
      cancel-in-progress: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java (Temurin 17)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: "3.35.6"

      - name: Show versions
        run: |
          flutter --version
          dart --version
          java -version

      - name: Cache pub packages
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: pub-cache-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            pub-cache-${{ runner.os }}-

      - name: flutter pub get
        run: flutter pub get

      - name: Write android/local.properties (SDK + Flutter path)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p android
          echo "sdk.dir=${ANDROID_SDK_ROOT:-${ANDROID_HOME}}" > android/local.properties
          FLUTTER_BIN="$(which flutter)"
          FLUTTER_SDK="$(dirname "$(dirname "$FLUTTER_BIN")")"
          echo "flutter.sdk=$FLUTTER_SDK" >> android/local.properties
          cat android/local.properties

      - name: Ensure google-services.json
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p android/app
          if [[ -f android/app/google-services.json ]]; then
            echo "google-services.json is present."
          elif [[ -n "${FIREBASE_GOOGLE_SERVICES_JSON:-}" ]]; then
            if [[ "${FIREBASE_GOOGLE_SERVICES_JSON:0:1}" == "{" ]]; then
              printf '%s' "${FIREBASE_GOOGLE_SERVICES_JSON}" > android/app/google-services.json
            else
              printf '%s' "${FIREBASE_GOOGLE_SERVICES_JSON}" | base64 -d > android/app/google-services.json
            fi
            echo "google-services.json written from secret."
          else
            echo "::error::Missing android/app/google-services.json and no secret provided."
            exit 1
          fi
          PKG=$(grep -o '"package_name":[[:space:]]*"[^"]*"' android/app/google-services.json | sed 's/.*"package_name":[[:space:]]*"\([^"]*\)".*/\1/' | head -n1 || true)
          echo "google-services package_name = ${PKG:-<unknown>}"

      - name: Sanity checks (namespace/MainActivity path)
        shell: bash
        run: |
          set -euo pipefail
          # Extract namespace from Groovy build.gradle
          NS=$(awk -F'"' '/^[[:space:]]*namespace[[:space:]]+/ {print $2}' android/app/build.gradle | head -n1 | tr -d '\r')
          echo "namespace in app/build.gradle = ${NS:-<none>}"
          if [[ "$NS" != "api.onlinecalculatorpro.cinepulse" ]]; then
            echo "::error::Namespace must be api.onlinecalculatorpro.cinepulse"
            exit 1
          fi
          PKG_DIR="${NS//./\/}"
          EXPECTED="android/app/src/main/kotlin/${PKG_DIR}/MainActivity.kt"
          if [[ ! -f "$EXPECTED" ]]; then
            echo "::error::MainActivity.kt not found at $EXPECTED"
            echo "Here are the MainActivity candidates:"
            find android/app/src/main/kotlin -name MainActivity.kt -print || true
            exit 1
          fi
          # Ensure <manifest> tag has no package="..."
          if grep -q '<manifest[^>]*package=' android/app/src/main/AndroidManifest.xml; then
            echo "::error::Remove package=\"...\" from AndroidManifest.xml (<manifest> tag) since namespace handles it."
            exit 1
          fi

      - name: Bootstrap Gradle wrapper (if missing)
        shell: bash
        run: |
          set -euo pipefail
          if [[ -x android/gradlew ]]; then
            echo "Gradle wrapper already present."
            exit 0
          fi

          PROP_FILE="android/gradle/wrapper/gradle-wrapper.properties"
          if [[ ! -f "$PROP_FILE" ]]; then
            echo "::error::${PROP_FILE} not found. The Android template is incomplete."
            exit 1
          fi

          # Read and unescape the distributionUrl (handles https\:// and CRLF)
          RAW_URL=$(grep '^distributionUrl=' "$PROP_FILE" | cut -d= -f2- | tr -d '\r' || true)
          DIST_URL=$(printf '%s' "$RAW_URL" | sed 's#\\://#://#g')
          echo "Unescaped distributionUrl: $DIST_URL"

          # Try downloading the declared distribution; on failure, fallback to "-bin.zip"
          if ! curl -fsSL "$DIST_URL" -o /tmp/gradle.zip; then
            echo "Primary URL failed. Falling back to -bin.zipâ€¦"
            VER=$(printf '%s' "$DIST_URL" | sed -n 's#.*gradle-\([0-9][^/]*\)-.*#\1#p')
            [[ -z "${VER:-}" ]] && { echo "::error::Could not parse Gradle version from distributionUrl"; exit 1; }
            FALLBACK="https://services.gradle.org/distributions/gradle-${VER}-bin.zip"
            echo "Fallback URL: $FALLBACK"
            curl -fsSL "$FALLBACK" -o /tmp/gradle.zip
          fi

          unzip -q /tmp/gradle.zip -d /tmp
          GRADLE_HOME=$(echo /tmp/gradle-*)
          export PATH="$GRADLE_HOME/bin:$PATH"
          (cd android && gradle wrapper)
          chmod +x android/gradlew
          echo "Wrapper ready: android/gradlew"

      - name: Build (Gradle wrapper only)
        shell: bash
        run: |
          set -euo pipefail
          cd android
          ./gradlew --no-daemon --stacktrace --warning-mode=all \
            -PAPI_BASE_URL="${{ env.API_BASE_URL }}" \
            -PDEEP_LINK_BASE="${{ env.DEEP_LINK_BASE }}" \
            :app:assembleDebug
          echo "== List APKs =="
          find app/build/outputs -type f -name "*.apk" -print | sed 's|^|  |'

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-debug
          path: |
            android/app/build/outputs/apk/debug/*.apk
            android/app/build/outputs/apk/*/debug/*.apk
          if-no-files-found: error
          retention-days: 7
