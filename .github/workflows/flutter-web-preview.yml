name: Web Deploy (Flutter â†’ VPS)

on:
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build:
    name: Build Flutter Web
    runs-on: ubuntu-latest
    env:
      # REQUIRED repo secrets (no trailing slash):
      #   API_BASE_URL    -> e.g. https://api.nutshellnewsapp.com
      #   DEEP_LINK_BASE  -> e.g. https://app.nutshellnewsapp.com
      API_BASE_URL: ${{ secrets.API_BASE_URL }}
      DEEP_LINK_BASE: ${{ secrets.DEEP_LINK_BASE }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: "3.35.6"

      - name: Show tool versions
        run: |
          flutter --version
          dart --version

      - name: Cache pub packages
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: pub-cache-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            pub-cache-${{ runner.os }}-

      - name: flutter pub get
        run: flutter pub get

      - name: Compute extra build args
        id: args
        shell: bash
        run: |
          if flutter build web -h | grep -q -- '--web-renderer'; then
            echo "args=--web-renderer html" >> "$GITHUB_OUTPUT"
          else
            echo "args=" >> "$GITHUB_OUTPUT"
          fi

      - name: Build Flutter Web
        env:
          API_BASE_URL_NORM: ${{ secrets.API_BASE_URL }}
          DEEP_LINK_BASE_NORM: ${{ secrets.DEEP_LINK_BASE }}
        run: |
          # normalize secrets to ensure no trailing slash
          api="${API_BASE_URL_NORM%/}"
          deep="${DEEP_LINK_BASE_NORM%/}"

          flutter build web --release \
            ${{ steps.args.outputs.args }} \
            --pwa-strategy=none \
            --dart-define=CINE_API_BASE="$api" \
            --dart-define=API_BASE_URL="$api" \
            --dart-define=DEEP_LINK_BASE="$deep"

      - name: List build outputs
        run: ls -lah build/web || true

      - name: Upload Web Build
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: build/web
          retention-days: 7

  deploy:
    name: Deploy to VPS via SSH/rsync
    needs: build
    runs-on: ubuntu-latest
    env:
      # REQUIRED repo secrets:
      #   SSH_PRIVATE_KEY  -> private key (PEM) that matches authorized_keys on the VPS
      #   VPS_HOST         -> e.g. 72.60.218.209
      #   VPS_USER         -> e.g. root (or a sudo user)
      # OPTIONAL (recommended):
      #   WEB_ROOT         -> e.g. /var/www/nutshellnewsapp_web
      #   SSH_PORT         -> e.g. 22
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      VPS_HOST:        ${{ secrets.VPS_HOST }}
      VPS_USER:        ${{ secrets.VPS_USER }}
      WEB_ROOT:        ${{ secrets.WEB_ROOT }}
      SSH_PORT:        ${{ secrets.SSH_PORT }}

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: build/web

      - name: Prepare SSH
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_vps
          chmod 600 ~/.ssh/id_vps

          # defaults if not provided
          : "${SSH_PORT:=22}"
          : "${WEB_ROOT:=/var/www/nutshellnewsapp_web}"

          # trust host key
          ssh-keyscan -p "${SSH_PORT}" -H "${VPS_HOST}" >> ~/.ssh/known_hosts

          # persist for later steps
          {
            echo "SSH_PORT=${SSH_PORT}"
            echo "WEB_ROOT=${WEB_ROOT}"
          } >> "$GITHUB_ENV"

      - name: Create target directory (if missing)
        run: |
          ssh -i ~/.ssh/id_vps -p "${SSH_PORT}" "${VPS_USER}@${VPS_HOST}" \
            "mkdir -p '${WEB_ROOT}'"

      - name: Rsync build to VPS
        run: |
          rsync -avz --delete \
            -e "ssh -i ~/.ssh/id_vps -p ${SSH_PORT}" \
            build/web/ "${VPS_USER}@${VPS_HOST}:${WEB_ROOT}/"

      - name: Post-deploy: permissions + nginx reload
        run: |
          ssh -i ~/.ssh/id_vps -p "${SSH_PORT}" "${VPS_USER}@${VPS_HOST}" '
            set -e
            if command -v chown >/dev/null 2>&1; then
              # adjust owner if you prefer root:root; www-data is typical for nginx
              chown -R www-data:www-data "'"${WEB_ROOT}"'" || true
            fi
            if command -v systemctl >/dev/null 2>&1; then
              systemctl reload nginx
            else
              service nginx reload || true
            fi
          '

      - name: Smoke test (HTTPS 200)
        run: |
          curl -sS -I https://app.nutshellnewsapp.com | head -n 3
