name: cinepulse
# Compose v2: omit `version:` to avoid the deprecation warning.

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# Shared bits (env + mounts)
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
x-common-env: &common-env
  env_file:
    - ../.env
  environment:
    TZ: ${TZ:-UTC}
    ENV: ${ENV:-dev}
    # If your API uses Postgres; safe default points at the local DB service
    DATABASE_URL: ${DATABASE_URL:-postgresql+psycopg://postgres:postgres@db:5432/cinepulse}
    # ðŸ‘‡ CRITICAL: always point to the docker service name "redis"
    REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
    # Optional integrations (kept empty by default)
    TMDB_API_KEY: ${TMDB_API_KEY:-}
    # The sources file is mounted below into /app/config/source.yml
    SOURCES_FILE: /app/config/source.yml

x-sources-mount: &sources-mount
  - ./source.yml:/app/config/source.yml:ro

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# Services
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
services:
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: cinepulse
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - dbdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d cinepulse"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redisdata:/data
    # Do NOT publish 6379 to host to avoid port conflicts
    # ports:
    #   - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # FastAPI backend: /health, /v1/feed, /v1/story/<id>, /v1/search
  api:
    <<: *common-env
    build:
      context: ..
      dockerfile: apps/api/Dockerfile
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes: *sources-mount
    environment:
      UVICORN_HOST: 0.0.0.0
      UVICORN_PORT: 8000
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "python - <<'PY'\nimport urllib.request,sys\ntry:\n  r=urllib.request.urlopen('http://localhost:8000/health',timeout=3)\n  sys.exit(0 if r.status==200 else 1)\nexcept Exception:\n  sys.exit(1)\nPY"
        ]
      interval: 15s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Background worker (RQ) that consumes jobs from Redis
  worker:
    <<: *common-env
    build:
      context: ..
      dockerfile: apps/workers/Dockerfile
    depends_on:
      redis:
        condition: service_healthy
    volumes: *sources-mount
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "python - <<'PY'\nimport os,sys\nfrom redis import from_url\nfrom_url(os.getenv('REDIS_URL','redis://redis:6379/0')).ping()\nsys.exit(0)\nPY"
        ]
      interval: 20s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Lightweight scheduler that enqueues periodic jobs for the worker
  scheduler:
    <<: *common-env
    build:
      context: ..
      dockerfile: apps/scheduler/Dockerfile
    environment:
      # Frequency / window
      POLL_INTERVAL_MIN: ${POLL_INTERVAL_MIN:-15}
      PUBLISHED_AFTER_HOURS: ${PUBLISHED_AFTER_HOURS:-72}
      POLL_SPREAD_SEC: ${POLL_SPREAD_SEC:-2.0}
      POLL_JITTER_SEC: ${POLL_JITTER_SEC:-10}
      ONE_SHOT: ${ONE_SHOT:-}
      # Sources (read from .env â€” keep empty here if you manage in secrets)
      YT_CHANNELS: ${YT_CHANNELS:-}
      RSS_FEEDS: ${RSS_FEEDS:-}
      # Per-poll caps (optional)
      YT_MAX_ITEMS: ${YT_MAX_ITEMS:-}
      RSS_MAX_ITEMS: ${RSS_MAX_ITEMS:-}
    depends_on:
      redis:
        condition: service_healthy
    volumes: *sources-mount
    restart: unless-stopped

  # Optional: server-side renderer / image proxy
  renderer:
    build:
      context: ..
      dockerfile: apps/renderer/Dockerfile
    ports:
      - "8100:8000"
    restart: unless-stopped
    # profiles: ["extras"]

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# Volumes
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
volumes:
  dbdata: {}
  redisdata: {}
