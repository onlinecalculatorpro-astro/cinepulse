version: "3.9"
services:
  redis:
    image: redis:7-alpine
    command: ["redis-server","--save","60","1","--loglevel","warning"]
    volumes: ["redis:/data"]
    networks: [app]
    restart: unless-stopped

  api:
    build: .
    env_file: [ .env ]
    environment:
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
    depends_on: [redis]
    networks: [app]
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      start_period: 20s
      retries: 5
    restart: unless-stopped

  webhooks:
    build:
      context: .
      target: webhooks
    restart: unless-stopped
    environment:
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      FEED_KEY: ${FEED_KEY:-feed:items}
      PUBLIC_BASE_URL: ${PUBLIC_BASE_URL:-}          # e.g. https://your-domain.tld  (or https://your-domain.tld/hooks if youâ€™ll mount under /hooks)
      AUTO_SUBSCRIBE_ON_START: ${AUTO_SUBSCRIBE_ON_START:-1}
      USE_SOURCES_FILE: "1"
      SOURCES_FILE: /app/source.yml
      WEBHOOK_LEASE_SEC: ${WEBHOOK_LEASE_SEC:-86400}
      YT_PULL_WINDOW_HOURS: ${YT_PULL_WINDOW_HOURS:-72}
      RSS_PULL_WINDOW_HOURS: ${RSS_PULL_WINDOW_HOURS:-48}
      WEBHOOK_SHARED_SECRET: ${WEBHOOK_SHARED_SECRET:-}
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./source.yml:/app/source.yml:ro
    networks:
      - app
    ports:
      - "127.0.0.1:18200:8000"
    command: >
      gunicorn -k uvicorn.workers.UvicornWorker -w ${WEBHOOK_WORKERS:-1}
      -b 0.0.0.0:8000 apps.webhooks.main:app
      --timeout 30 --keep-alive 5
      --max-requests 800 --max-requests-jitter 80
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python - <<'PY'
          import urllib.request,sys
          try:
              r=urllib.request.urlopen('http://localhost:8000/healthz',timeout=3)
              sys.exit(0 if r.status==200 else 1)
          except Exception:
              sys.exit(1)
          PY
      interval: 25s
      timeout: 5s
      retries: 5




  worker:
    build: .
    command: ["python","-m","apps.workers.worker"]
    env_file: [ .env ]
    environment:
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
    depends_on: [redis]
    networks: [app]
    restart: unless-stopped

  scheduler:
    build: .
    command: ["python","-m","apps.scheduler.main"]
    env_file: [ .env ]
    environment:
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      YT_CHANNELS: ${YT_CHANNELS:-UCWOA1ZGywLbqmigxE4Qlvuw}
      POLL_INTERVAL_MIN: ${POLL_INTERVAL_MIN:-5}
      PUBLISHED_AFTER_HOURS: ${PUBLISHED_AFTER_HOURS:-72}
    depends_on: [redis]
    networks: [app]
    restart: unless-stopped

  caddy:
    image: caddy:2
    restart: unless-stopped
    ports: ["80:80","443:443"]
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on: [api]
    networks: [app]

networks:
  app: {}

volumes:
  redis:
  caddy_data:
  caddy_config:
