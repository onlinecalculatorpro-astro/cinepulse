name: cinepulse

networks:
  app:
    driver: bridge

volumes:
  dbdata: {}
  redisdata: {}

services:
  db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_DB: cinepulse
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - dbdata:/var/lib/postgresql/data
    networks: [app]
    # keep DB internal; remove host port exposure
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U postgres -d cinepulse"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: ["redis-server","--appendonly","yes"]
    volumes:
      - redisdata:/data
    networks: [app]
    healthcheck:
      test: ["CMD","redis-cli","ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  api:
    build:
      context: ..
      dockerfile: infra/Dockerfile
      target: api
    restart: unless-stopped
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
    env_file: [ ../.env ]
    environment:
      TZ: ${TZ:-UTC}
      ENV: ${ENV:-prod}
      DATABASE_URL: ${DATABASE_URL:-postgresql+psycopg://postgres:postgres@db:5432/cinepulse}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      TMDB_API_KEY: ${TMDB_API_KEY:-}
      FEED_KEY: ${FEED_KEY:-feed:items}
      SOURCES_FILE: /app/source.yml
    volumes:
      - ./source.yml:/app/source.yml:ro
    networks: [app]
    # Nginx on the host will proxy to this loopback port
    ports:
      - "127.0.0.1:18000:8000"
    command: >
      uvicorn apps.api.app.main:app --host 0.0.0.0 --port 8000
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python - <<'PY'
          import urllib.request,sys
          try:
              r=urllib.request.urlopen('http://localhost:8000/health',timeout=3)
              sys.exit(0 if r.status==200 else 1)
          except Exception:
              sys.exit(1)
          PY
      interval: 15s
      timeout: 5s
      retries: 5

  worker:
    build:
      context: ..
      dockerfile: infra/Dockerfile
      target: worker
    restart: unless-stopped
    depends_on:
      redis: { condition: service_healthy }
    env_file: [ ../.env ]
    environment:
      TZ: ${TZ:-UTC}
      ENV: ${ENV:-prod}
      DATABASE_URL: ${DATABASE_URL:-postgresql+psycopg://postgres:postgres@db:5432/cinepulse}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      TMDB_API_KEY: ${TMDB_API_KEY:-}
      FEED_KEY: ${FEED_KEY:-feed:items}
      SOURCES_FILE: /app/source.yml
    volumes:
      - ./source.yml:/app/source.yml:ro
    networks: [app]
    command: >
      rq worker -u ${REDIS_URL} default
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python - <<'PY'
          import os,sys
          from redis import from_url
          from_url(os.getenv('REDIS_URL','redis://redis:6379/0')).ping()
          sys.exit(0)
          PY
      interval: 20s
      timeout: 5s
      retries: 5

  scheduler:
    build:
      context: ..
      dockerfile: infra/Dockerfile
      target: scheduler
    restart: unless-stopped
    depends_on:
      redis: { condition: service_healthy }
    env_file: [ ../.env ]
    environment:
      TZ: ${TZ:-UTC}
      ENV: ${ENV:-prod}
      DATABASE_URL: ${DATABASE_URL:-postgresql+psycopg://postgres:postgres@db:5432/cinepulse}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      TMDB_API_KEY: ${TMDB_API_KEY:-}
      FEED_KEY: ${FEED_KEY:-feed:items}
      SOURCES_FILE: /app/source.yml
      POLL_INTERVAL_MIN: ${POLL_INTERVAL_MIN:-15}
      PUBLISHED_AFTER_HOURS: ${PUBLISHED_AFTER_HOURS:-72}
      POLL_SPREAD_SEC: ${POLL_SPREAD_SEC:-2.0}
      POLL_JITTER_SEC: ${POLL_JITTER_SEC:-10}
      ONE_SHOT: ${ONE_SHOT:-}
      YT_CHANNELS: ${YT_CHANNELS:-}
      RSS_FEEDS: ${RSS_FEEDS:-}
      YT_MAX_ITEMS: ${YT_MAX_ITEMS:-50}
      RSS_MAX_ITEMS: ${RSS_MAX_ITEMS:-200}
    volumes:
      - ./source.yml:/app/source.yml:ro
    networks: [app]
    command: python -m apps.scheduler.main

  renderer:
    build:
      context: ..
      dockerfile: infra/Dockerfile
      target: renderer
    restart: unless-stopped
    networks: [app]
    # keep it internal on loopback; change/remove if you want public
    ports:
      - "127.0.0.1:18100:8000"
