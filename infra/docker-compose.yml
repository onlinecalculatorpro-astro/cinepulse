version: "3.9"

name: cinepulse

# ---------- shared bits ----------
x-common-env: &common-env
  env_file:
    - ../.env
  environment:
    TZ: ${TZ:-UTC}
    ENV: ${ENV:-dev}
    DATABASE_URL: ${DATABASE_URL:-postgresql+psycopg://postgres:postgres@db:5432/cinepulse}
    REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
    TMDB_API_KEY: ${TMDB_API_KEY:-}
    # inside the container
    SOURCES_FILE: /app/config/source.yml

x-sources-mount: &sources-mount
  - ./source.yml:/app/config/source.yml:ro

x-logging: &logging
  logging:
    driver: json-file
    options:
      max-size: "10m"
      max-file: "3"

networks:
  cinepulse_network:
    driver: bridge

volumes:
  dbdata: {}
  redisdata: {}

services:
  db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_DB: cinepulse
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - dbdata:/var/lib/postgresql/data
    networks: [cinepulse_network]
    # keep DB private (NO host port). If you must access from host, use:
    # ports: ["127.0.0.1:5432:5432"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d cinepulse"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s


  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redisdata:/data
    networks: [cinepulse_network]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s


  api:
    <<:
      - *common-env
      - *logging
    build:
      context: ..
      dockerfile: infra/Dockerfile
      target: api
    restart: unless-stopped
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
    volumes: *sources-mount
    networks: [cinepulse_network]
    ports:
      - "127.0.0.1:18000:8000"
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python - <<'PY'
          import urllib.request,sys
          try:
              r=urllib.request.urlopen('http://localhost:8000/health',timeout=3)
              sys.exit(0 if r.status==200 else 1)
          except Exception:
              sys.exit(1)
          PY
      interval: 15s
      timeout: 5s
      retries: 5


  worker:
    <<:
      - *common-env
      - *logging
    build:
      context: ..
      dockerfile: infra/Dockerfile
      target: worker
    restart: unless-stopped
    depends_on:
      redis: { condition: service_healthy }
    volumes: *sources-mount
    networks: [cinepulse_network]
    command: >
      sh -lc 'rq worker -u "$$REDIS_URL" default'
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python - <<'PY'
          import os,sys
          from redis import from_url
          from_url(os.getenv('REDIS_URL','redis://redis:6379/0')).ping()
          sys.exit(0)
          PY
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 10s


  scheduler:
    <<: *common-env
    build:
      context: ..
      dockerfile: infra/Dockerfile
      target: scheduler
    restart: unless-stopped
    depends_on:
      redis: { condition: service_healthy }
    volumes: *sources-mount
    networks: [cinepulse_network]
    environment:
      POLL_INTERVAL_MIN: ${POLL_INTERVAL_MIN:-15}
      PUBLISHED_AFTER_HOURS: ${PUBLISHED_AFTER_HOURS:-72}
      POLL_SPREAD_SEC: ${POLL_SPREAD_SEC:-2.0}
      POLL_JITTER_SEC: ${POLL_JITTER_SEC:-10}
      ONE_SHOT: ${ONE_SHOT:-}
      YT_CHANNELS: ${YT_CHANNELS:-}
      RSS_FEEDS: ${RSS_FEEDS:-}
      YT_MAX_ITEMS: ${YT_MAX_ITEMS:-}
      RSS_MAX_ITEMS: ${RSS_MAX_ITEMS:-}
    command: >-
      python -m apps.scheduler.main


  renderer:
    build:
      context: ..
      dockerfile: infra/Dockerfile
      target: renderer
    restart: unless-stopped
    networks: [cinepulse_network]
    # keep local-only unless you truly want it public
    ports:
      - "127.0.0.1:8100:8000"
    profiles: ["extras"]


