name: cinepulse

services:
  db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_DB: cinepulse
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - dbdata:/var/lib/postgresql/data
    networks:
      - app
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -U postgres -d cinepulse
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redisdata:/data
    networks:
      - app
    healthcheck:
      test:
        - CMD
        - redis-cli
        - ping
      interval: 10s
      timeout: 3s
      retries: 5

  api:
    build:
      context: .
      dockerfile: infra/Dockerfile
      target: api
    restart: unless-stopped
    env_file:
      - .env
    environment:
      CORS_ORIGINS: ${CORS_ORIGINS:-*}
      MAX_SCAN: ${MAX_SCAN:-400}
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./source.yml:/app/source.yml:ro
    networks:
      - app
    ports:
      - "18000:8000"
    command: >
      gunicorn -k uvicorn.workers.UvicornWorker -w ${API_WORKERS:-1}
      -b 0.0.0.0:8000 apps.api.app.main:app
      --timeout 30 --keep-alive 5
      --max-requests 800 --max-requests-jitter 80
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python - <<'PY'
          import json,urllib.request,sys
          try:
              r=urllib.request.urlopen('http://localhost:8000/health',timeout=3)
              j=json.loads(r.read().decode())
              sys.exit(0 if r.status==200 and j.get('status')=='ok' else 1)
          except Exception:
              sys.exit(1)
          PY
      interval: 20s
      timeout: 5s
      retries: 5

  worker:
    build:
      context: .
      dockerfile: infra/Dockerfile
      target: worker
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./source.yml:/app/source.yml:ro
    networks:
      - app
    command: >
      sh -lc 'rq worker -u "${REDIS_URL:-redis://redis:6379/0}" events'
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python - <<'PY'
          import os,sys
          from redis import from_url
          try:
              from_url(os.getenv('REDIS_URL','redis://redis:6379/0')).ping()
              sys.exit(0)
          except Exception:
              sys.exit(1)
          PY
      interval: 25s
      timeout: 5s
      retries: 5

  webhooks:
    build:
      context: .
      dockerfile: infra/Dockerfile
      target: base
    restart: unless-stopped
    env_file:
      - .env
    environment:
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      FEED_KEY: ${FEED_KEY:-feed:items}
      PUBLIC_BASE_URL: ${PUBLIC_BASE_URL:-}
      AUTO_SUBSCRIBE_ON_START: ${AUTO_SUBSCRIBE_ON_START:-1}
      USE_SOURCES_FILE: "1"
      SOURCES_FILE: /app/source.yml
      WEBHOOK_LEASE_SEC: ${WEBHOOK_LEASE_SEC:-86400}
      YT_PULL_WINDOW_HOURS: ${YT_PULL_WINDOW_HOURS:-72}
      RSS_PULL_WINDOW_HOURS: ${RSS_PULL_WINDOW_HOURS:-48}
      WEBHOOK_SHARED_SECRET: ${WEBHOOK_SHARED_SECRET:-}
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./source.yml:/app/source.yml:ro
    networks:
      - app
    ports:
      - "18200:8000"
    command: >
      gunicorn -k uvicorn.workers.UvicornWorker -w ${WEBHOOK_WORKERS:-1}
      -b 0.0.0.0:8000 apps.webhooks.main:app
      --timeout 30 --keep-alive 5
      --max-requests 800 --max-requests-jitter 80
    healthcheck:
      test:
        - CMD-SHELL
        - curl -sf http://localhost:8000/healthz || exit 1
      interval: 20s
      timeout: 5s
      retries: 5

  scheduler:
    build:
      context: .
      dockerfile: infra/Dockerfile
      target: scheduler
    restart: unless-stopped
    profiles:
      - poller
    env_file:
      - .env
    environment:
      POLL_INTERVAL_MIN: ${POLL_INTERVAL_MIN:-120}
      PUBLISHED_AFTER_HOURS: ${PUBLISHED_AFTER_HOURS:-72}
      POLL_SPREAD_SEC: ${POLL_SPREAD_SEC:-2.0}
      POLL_JITTER_SEC: ${POLL_JITTER_SEC:-10}
      ONE_SHOT: ${ONE_SHOT:-}
      YT_MAX_ITEMS: ${YT_MAX_ITEMS:-20}
      RSS_MAX_ITEMS: ${RSS_MAX_ITEMS:-100}
      USE_SOURCES_FILE: "1"
      SOURCES_FILE: /app/source.yml
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./source.yml:/app/source.yml:ro
    networks:
      - app
    command: python -m apps.scheduler.main
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python - <<'PY'
          import os,sys
          from redis import from_url
          try:
              from_url(os.getenv('REDIS_URL','redis://redis:6379/0')).ping()
              sys.exit(0)
          except Exception:
              sys.exit(1)
          PY
      interval: 30s
      timeout: 5s
      retries: 5

  renderer:
    build:
      context: .
      dockerfile: infra/Dockerfile
      target: renderer
    restart: unless-stopped
    profiles:
      - renderer
    networks:
      - app
    ports:
      - "18100:8000"
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python - <<'PY'
          import urllib.request,sys
          try:
              r=urllib.request.urlopen('http://localhost:8000/health',timeout=3)
              sys.exit(0 if r.status==200 else 1)
          except Exception:
              sys.exit(1)
          PY
      interval: 25s
      timeout: 5s
      retries: 5

networks:
  app:
    driver: bridge

volumes:
  dbdata: {}
  redisdata: {}
