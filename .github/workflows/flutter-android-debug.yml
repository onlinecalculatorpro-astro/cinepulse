name: Android Debug (APK - manual)

on:
  workflow_dispatch:
    inputs:
      apiBase:
        description: "API base URL (e.g. https://api.onlinecalculatorpro.org)"
        required: false
        default: ""
      deepLinkBase:
        description: "Deep link base (e.g. https://cinepulse.netlify.app/#/s)"
        required: false
        default: ""
      applicationId:
        description: "Android applicationId / package (must match google-services.json)"
        required: false
        default: "api.onlinecalculatorpro.cinepulse"

env:
  # Prefer repo secrets → manual inputs → sensible defaults
  API_BASE_URL: ${{ secrets.API_BASE_URL || inputs.apiBase || 'https://api.onlinecalculatorpro.org' }}
  DEEP_LINK_BASE: ${{ secrets.DEEP_LINK_BASE || inputs.deepLinkBase || 'https://cinepulse.netlify.app/#/s' }}
  APPLICATION_ID: ${{ secrets.ANDROID_APPLICATION_ID || inputs.applicationId || 'api.onlinecalculatorpro.cinepulse' }}

  # If provided, will be used to write android/app/google-services.json (raw JSON or base64)
  FIREBASE_GOOGLE_SERVICES_JSON: ${{ secrets.FIREBASE_GOOGLE_SERVICES_JSON }}

jobs:
  build:
    name: Build debug APKs
    runs-on: ubuntu-latest
    concurrency:
      group: android-debug-${{ github.ref_name }}
      cancel-in-progress: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java (Temurin 17)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: "3.35.6"

      - name: Show versions
        run: |
          flutter --version
          dart --version
          java -version

      - name: Cache pub packages
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: pub-cache-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            pub-cache-${{ runner.os }}-

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('android/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: flutter pub get
        run: flutter pub get

      # Regenerate Android scaffolding to keep templates in a supported shape
      - name: Ensure Android platform exists (overwrite)
        run: flutter create --platforms=android --overwrite .

      # Make sure Flutter/Android SDK paths are discoverable by settings.gradle.kts
      - name: Ensure Android local.properties
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p android
          # ANDROID_SDK_ROOT is provided by the runner
          echo "sdk.dir=${ANDROID_SDK_ROOT}" > android/local.properties
          # Derive flutter.sdk from installed flutter binary
          FLUTTER_BIN="$(which flutter)"
          FLUTTER_SDK="$(dirname "$(dirname "$FLUTTER_BIN")")"  # .../flutter
          echo "flutter.sdk=${FLUTTER_SDK}" >> android/local.properties
          echo "== android/local.properties =="
          cat android/local.properties

      # Write google-services.json if not in repo; supports secret as raw or base64 JSON
      - name: Ensure google-services.json
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p android/app
          if [[ -f android/app/google-services.json ]]; then
            echo "google-services.json found in repository."
          elif [[ -n "${FIREBASE_GOOGLE_SERVICES_JSON:-}" ]]; then
            echo "Writing google-services.json from secret."
            if [[ "${FIREBASE_GOOGLE_SERVICES_JSON:0:1}" == "{" ]]; then
              printf '%s' "${FIREBASE_GOOGLE_SERVICES_JSON}" > android/app/google-services.json
            else
              printf '%s' "${FIREBASE_GOOGLE_SERVICES_JSON}" | base64 -d > android/app/google-services.json
            fi
          else
            echo "::error::google-services.json is missing and no secret was provided."
            exit 1
          fi

          # Sanity check: show package_name from the file and compare
          PKG=$(grep -o '"package_name":[[:space:]]*"[^"]*"' android/app/google-services.json | sed 's/.*"package_name":[[:space:]]*"\([^"]*\)".*/\1/' | head -n1 || true)
          echo "google-services.json package_name = ${PKG:-<unknown>}"
          if [[ -n "${PKG:-}" && -n "${APPLICATION_ID:-}" && "$PKG" != "$APPLICATION_ID" ]]; then
            echo "::warning::APPLICATION_ID ($APPLICATION_ID) != google-services.json package_name ($PKG)"
          fi

      - name: Build debug APKs (per ABI)
        run: |
          flutter build apk --debug --split-per-abi \
            --dart-define=API_BASE_URL="${{ env.API_BASE_URL }}" \
            --dart-define=DEEP_LINK_BASE="${{ env.DEEP_LINK_BASE }}"

      - name: List APKs
        run: ls -lh build/app/outputs/flutter-apk || true

      - name: Upload APK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-debug
          path: build/app/outputs/flutter-apk/*.apk
          if-no-files-found: error
          retention-days: 7
