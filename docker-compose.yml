version: "3.9"
services:
  redis:
    image: redis:7-alpine
    command: ["redis-server","--save","60","1","--loglevel","warning"]
    volumes: ["redis:/data"]
    networks: [app]
    restart: unless-stopped

  api:
    build: .
    env_file: [ .env ]
    environment:
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
    depends_on: [redis]
    networks: [app]
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      start_period: 20s
      retries: 5
    restart: unless-stopped

  worker:
    build: .
    command: ["python","-m","apps.workers.worker"]
    env_file: [ .env ]
    environment:
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
    depends_on: [redis]
    networks: [app]
    restart: unless-stopped

  scheduler:
    build: .
    command: ["python","-m","apps.scheduler.main"]
    env_file: [ .env ]
    environment:
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      YT_CHANNELS: ${YT_CHANNELS:-UCWOA1ZGywLbqmigxE4Qlvuw}
      POLL_INTERVAL_MIN: ${POLL_INTERVAL_MIN:-5}
      PUBLISHED_AFTER_HOURS: ${PUBLISHED_AFTER_HOURS:-72}
    depends_on: [redis]
    networks: [app]
    restart: unless-stopped

  caddy:
    image: caddy:2
    restart: unless-stopped
    ports: ["80:80","443:443"]
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on: [api]
    networks: [app]

networks:
  app: {}

volumes:
  redis:
  caddy_data:
  caddy_config:
