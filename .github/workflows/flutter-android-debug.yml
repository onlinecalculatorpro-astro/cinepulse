name: Android Debug (APK - manual)

on:
  workflow_dispatch:
    inputs:
      apiBase:
        description: "API base URL (e.g. https://api.onlinecalculatorpro.org)"
        required: false
        default: ""
      deepLinkBase:
        description: "Deep link base (e.g. https://cinepulse.netlify.app/#/s)"
        required: false
        default: ""
      applicationId:
        description: "Android applicationId / package (must match google-services.json)"
        required: false
        default: "api.onlinecalculatorpro.cinepulse"

env:
  API_BASE_URL: ${{ secrets.API_BASE_URL || inputs.apiBase || 'https://api.onlinecalculatorpro.org' }}
  DEEP_LINK_BASE: ${{ secrets.DEEP_LINK_BASE || inputs.deepLinkBase || 'https://cinepulse.netlify.app/#/s' }}
  APPLICATION_ID: ${{ secrets.ANDROID_APPLICATION_ID || inputs.applicationId || 'api.onlinecalculatorpro.cinepulse' }}
  FIREBASE_GOOGLE_SERVICES_JSON: ${{ secrets.FIREBASE_GOOGLE_SERVICES_JSON }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    concurrency:
      group: android-debug-${{ github.ref_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java (Temurin 17)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: "3.35.6"

      - name: Show versions
        run: |
          flutter --version
          dart --version
          java -version

      - name: Cache pub packages
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: pub-cache-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            pub-cache-${{ runner.os }}-

      - name: flutter pub get
        run: flutter pub get

      - name: Write android/local.properties
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p android
          echo "sdk.dir=${ANDROID_SDK_ROOT:-${ANDROID_HOME}}" > android/local.properties
          FLUTTER_BIN="$(which flutter)"
          FLUTTER_SDK="$(dirname "$(dirname "$FLUTTER_BIN")")"
          echo "flutter.sdk=$FLUTTER_SDK" >> android/local.properties
          cat android/local.properties

      - name: Ensure google-services.json (optional)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p android/app
          if [[ -f android/app/google-services.json ]]; then
            echo "google-services.json present."
          elif [[ -n "${FIREBASE_GOOGLE_SERVICES_JSON:-}" ]]; then
            if [[ "${FIREBASE_GOOGLE_SERVICES_JSON:0:1}" == "{" ]]; then
              printf '%s' "${FIREBASE_GOOGLE_SERVICES_JSON}" > android/app/google-services.json
            else
              printf '%s' "${FIREBASE_GOOGLE_SERVICES_JSON}" | base64 -d > android/app/google-services.json
            fi
            echo "google-services.json written from secret."
          else
            echo "No google-services.json provided (build continues)."
          fi
          PKG=$(grep -o '"package_name":[[:space:]]*"[^"]*"' android/app/google-services.json 2>/dev/null | sed 's/.*"package_name":[[:space:]]*"\([^"]*\)".*/\1/' | head -n1 || true)
          [[ -n "${PKG:-}" ]] && echo "google-services package_name = ${PKG}"

      - name: Quick Android sanity checks
        shell: bash
        run: |
          set -euo pipefail
          # <manifest> must NOT have package="..."
          if grep -q '<manifest[^>]*package=' android/app/src/main/AndroidManifest.xml; then
            echo "::error::Remove package=\"...\" from AndroidManifest.xml <manifest> (namespace controls it)."
            exit 1
          fi
          # Show minSdk for visibility
          awk '/minSdk/ {print "minSdk =", $0}' android/app/build.gradle || true

      - name: Ensure Gradle wrapper (bootstrap if missing)
        shell: bash
        run: |
          set -euo pipefail
          if [[ -x android/gradlew ]]; then
            echo "Gradle wrapper exists."
            exit 0
          fi
          PROP="android/gradle/wrapper/gradle-wrapper.properties"
          if [[ ! -f "$PROP" ]]; then
            echo "::warning::gradle-wrapper.properties missing. Bootstrapping with Gradle 8.10.2"
            curl -sL https://services.gradle.org/distributions/gradle-8.10.2-bin.zip -o /tmp/gradle.zip
            unzip -q /tmp/gradle.zip -d /tmp
            export PATH="/tmp/gradle-8.10.2/bin:$PATH"
            (cd android && gradle wrapper)
            chmod +x android/gradlew
            exit 0
          fi
          RAW_URL=$(grep '^distributionUrl=' "$PROP" | cut -d= -f2- | tr -d '\r' || true)
          DIST_URL=$(printf '%s' "$RAW_URL" | sed 's#\\://#://#g')
          echo "Downloading Gradle from: $DIST_URL"
          curl -fsSL "$DIST_URL" -o /tmp/gradle.zip || {
            VER=$(printf '%s' "$DIST_URL" | sed -n 's#.*gradle-\([0-9][^/]*\)-.*#\1#p')
            curl -fsSL "https://services.gradle.org/distributions/gradle-${VER}-bin.zip" -o /tmp/gradle.zip
          }
          unzip -q /tmp/gradle.zip -d /tmp
          GRADLE_HOME=$(echo /tmp/gradle-*)
          export PATH="$GRADLE_HOME/bin:$PATH"
          (cd android && gradle wrapper)
          chmod +x android/gradlew
          echo "Wrapper ready."

      - name: Flutter analyze (log only)
        shell: bash
        run: |
          set -euo pipefail
          if ! flutter analyze; then
            echo "::warning::flutter analyze found issues (shown above). Continuing so we capture full logs."
          fi

      - name: Build (Flutter verbose, Gradle fallback)
        shell: bash
        run: |
          set -euo pipefail
          FL_LOG="flutter-verbose.log"

          # Try Flutter first (verbose)
          if ! flutter build apk --debug --split-per-abi -v \
              --dart-define=API_BASE_URL="${{ env.API_BASE_URL }}" \
              --dart-define=DEEP_LINK_BASE="${{ env.DEEP_LINK_BASE }}" \
              2>&1 | tee "$FL_LOG"; then
            echo "::warning::Flutter build failed. Trying Gradle wrapperâ€¦"
          fi

          have_flutter_apk() { find build/app/outputs/flutter-apk -maxdepth 1 -name "*.apk" | grep -q .; }
          if have_flutter_apk; then
            echo "Flutter produced APK(s):"
            find build/app/outputs/flutter-apk -name "*.apk" -print
            echo "APK_PRESENT=1" >> "$GITHUB_ENV"
            exit 0
          fi

          # Gradle fallback (pass dart-defines via DART_DEFINES)
          cd android
          B64_API=$(printf '%s' "API_BASE_URL=${{ env.API_BASE_URL }}" | base64 | tr -d '\n')
          B64_DEEP=$(printf '%s' "DEEP_LINK_BASE=${{ env.DEEP_LINK_BASE }}" | base64 | tr -d '\n')
          export DART_DEFINES="$B64_API,$B64_DEEP"

          set +e
          ./gradlew --no-daemon --stacktrace --warning-mode=all :app:assembleDebug
          GRADLE_STATUS=$?
          set -e

          echo "GRADLE_STATUS=$GRADLE_STATUS" >> "$GITHUB_ENV"

          echo "APK list (Gradle dirs):"
          find app/build/outputs -name "*.apk" -print || true

          if find app/build/outputs -name "*.apk" | grep -q .; then
            echo "APK_PRESENT=1" >> "$GITHUB_ENV"
          else
            echo "APK_PRESENT=0" >> "$GITHUB_ENV"
          fi

      - name: Upload verbose Flutter log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: flutter-verbose-log
          path: flutter-verbose.log
          if-no-files-found: warn
          retention-days: 7

      - name: Upload Gradle problems report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gradle-problems-report
          path: android/build/reports/problems/**
          if-no-files-found: warn
          retention-days: 7

      - name: Upload APK artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-debug
          path: |
            build/app/outputs/flutter-apk/*.apk
            android/app/build/outputs/apk/debug/*.apk
            android/app/build/outputs/apk/*/debug/*.apk
          if-no-files-found: warn
          retention-days: 7

      - name: Fail if nothing produced
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          echo "APK_PRESENT=${APK_PRESENT:-0}"
          if [[ "${APK_PRESENT:-0}" != "1" ]]; then
            echo "::error::No APKs were produced. See flutter-verbose-log and gradle-problems-report artifacts for the real error."
            exit 1
          fi
