# .github/workflows/flutter-web-preview.yml
name: Web Preview (Flutter)

on:
  workflow_dispatch:
    inputs:
      apiBase:
        description: "API base URL (e.g. https://api.cinepulse.app)"
        required: false
        default: ""
      deepLinkBase:
        description: "Deep link base (e.g. https://cinepulse.netlify.app/#/s)"
        required: false
        default: ""
  push:
    branches: [ main ]
    paths:
      - "apps/flutter/cinepulse_app/**"
      - ".github/workflows/flutter-web-preview.yml"

# Prefer GitHub Secrets; fall back to manual inputs; finally a sane default.
env:
  API_BASE_URL: ${{ secrets.API_BASE_URL || inputs.apiBase || 'http://72.60.218.209:8000' }}
  DEEP_LINK_BASE: ${{ secrets.DEEP_LINK_BASE || inputs.deepLinkBase || 'https://cinepulse.netlify.app/#/s' }}

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/flutter/cinepulse_app

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: "3.35.6"

      - name: Show tool versions
        run: |
          flutter --version
          dart --version

      - name: Cache pub packages
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: pub-cache-${{ runner.os }}-${{ hashFiles('apps/flutter/cinepulse_app/pubspec.lock') }}
          restore-keys: |
            pub-cache-${{ runner.os }}-

      - name: flutter pub get
        run: flutter pub get

      - name: Compute extra build args
        id: args
        shell: bash
        run: |
          if flutter build web -h | grep -q -- '--web-renderer'; then
            echo "args=--web-renderer html" >> "$GITHUB_OUTPUT"
          else
            echo "args=" >> "$GITHUB_OUTPUT"
          fi

      - name: Build Flutter Web (with dart-defines)
        run: |
          flutter build web --release \
            ${{ steps.args.outputs.args }} \
            --dart-define=API_BASE_URL=${{ env.API_BASE_URL }} \
            --dart-define=DEEP_LINK_BASE=${{ env.DEEP_LINK_BASE }}

      - name: Verify dart-defines embedded (robust)
        shell: bash
        run: |
          set -euo pipefail
          ROOT="build/web"
          search_define () {
            local KEY="$1"; local VAL="$2"
            kv_b64=$(printf "%s=%s" "$KEY" "$VAL" | base64 | tr -d '\n\r')
            v_b64=$(printf "%s" "$VAL" | base64 | tr -d '\n\r')
            echo "Checking ${KEY}â€¦"
            if grep -R -a -Fq -- "$VAL"  "$ROOT"/*.js "$ROOT"/*/*.js 2>/dev/null \
            || grep -R -a -Fq -- "$kv_b64" "$ROOT"/*.js "$ROOT"/*/*.js 2>/dev/null \
            || grep -R -a -Fq -- "$v_b64"  "$ROOT"/*.js "$ROOT"/*/*.js 2>/dev/null; then
              echo "OK: ${KEY} found in build output."
            else
              echo "::warning ::${KEY} not found literally (likely minified/base64). Continuing."
            fi
          }
          search_define "API_BASE_URL"  "${API_BASE_URL}"
          search_define "DEEP_LINK_BASE" "${DEEP_LINK_BASE}"

      - name: List build outputs
        run: ls -lah build/web || true

      - name: Upload Web Build
        uses: actions/upload-artifact@v4
        with:
          name: web-preview
          # IMPORTANT: upload-artifact runs from repo root, so use the full path
          path: apps/flutter/cinepulse_app/build/web
          if-no-files-found: error

  deploy:
    needs: build
    runs-on: ubuntu-latest
    concurrency:
      group: netlify-prod
      cancel-in-progress: false

    steps:
      - name: Download web artifact
        uses: actions/download-artifact@v4
        with:
          name: web-preview
          path: build/web

      - name: Add SPA redirect (safe with hash routing)
        run: echo "/* /index.html 200" > build/web/_redirects

      - name: Setup Node (for Netlify CLI)
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Check Netlify secrets present
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: |
          test -n "${NETLIFY_AUTH_TOKEN}" && echo "Auth token OK"
          test -n "${NETLIFY_SITE_ID}" && echo "Site ID OK"

      - name: Deploy to Netlify (production)
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: npx --yes netlify-cli@17 deploy --dir=build/web --prod --message "CI deploy $GITHUB_SHA"
