name: Android Debug (APK - manual)

on:
  workflow_dispatch:
    inputs:
      apiBase:
        description: "API base URL (e.g. https://api.onlinecalculatorpro.org)"
        required: false
        default: ""
      deepLinkBase:
        description: "Deep link base (e.g. https://cinepulse.netlify.app/#/s)"
        required: false
        default: ""
      applicationId:
        description: "Android applicationId / package (must match google-services.json)"
        required: false
        default: "api.onlinecalculatorpro.cinepulse"

env:
  API_BASE_URL: ${{ secrets.API_BASE_URL || inputs.apiBase || 'https://api.onlinecalculatorpro.org' }}
  DEEP_LINK_BASE: ${{ secrets.DEEP_LINK_BASE || inputs.deepLinkBase || 'https://cinepulse.netlify.app/#/s' }}
  APPLICATION_ID: ${{ secrets.ANDROID_APPLICATION_ID || inputs.applicationId || 'api.onlinecalculatorpro.cinepulse' }}
  # Raw JSON or base64; only used if file isn't in repo
  FIREBASE_GOOGLE_SERVICES_JSON: ${{ secrets.FIREBASE_GOOGLE_SERVICES_JSON }}

jobs:
  build:
    name: Build debug APKs
    runs-on: ubuntu-latest
    permissions:
      contents: read
    concurrency:
      group: android-debug-${{ github.ref_name }}
      cancel-in-progress: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java (Temurin 17)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: "3.35.6"

      - name: Show versions
        run: |
          flutter --version
          dart --version
          java -version

      - name: Cache pub packages
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: pub-cache-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            pub-cache-${{ runner.os }}-

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('android/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: flutter pub get
        run: flutter pub get

      - name: Ensure Android local.properties
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p android
          echo "sdk.dir=${ANDROID_SDK_ROOT:-${ANDROID_HOME}}" > android/local.properties
          FLUTTER_BIN="$(which flutter)"
          FLUTTER_SDK="$(dirname "$(dirname "$FLUTTER_BIN")")"
          echo "flutter.sdk=${FLUTTER_SDK}" >> android/local.properties
          echo "== android/local.properties ==" && cat android/local.properties

      - name: Ensure gradle.properties (stable defaults)
        shell: bash
        run: |
          set -euo pipefail
          cat > android/gradle.properties <<'PROPS'
org.gradle.jvmargs=-Xmx3g -XX:MaxMetaspaceSize=1g -Dfile.encoding=UTF-8
org.gradle.daemon=false
org.gradle.parallel=true
org.gradle.configureondemand=true
org.gradle.workers.max=2
android.useAndroidX=true
android.enableJetifier=true
# Hide AGP warning for compileSdk 36 (optional)
android.suppressUnsupportedCompileSdk=36
PROPS
          echo "== android/gradle.properties ==" && cat android/gradle.properties

      - name: Ensure google-services.json
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p android/app
          if [[ -f android/app/google-services.json ]]; then
            echo "google-services.json found in repository."
          elif [[ -n "${FIREBASE_GOOGLE_SERVICES_JSON:-}" ]]; then
            echo "Writing google-services.json from secret."
            if [[ "${FIREBASE_GOOGLE_SERVICES_JSON:0:1}" == "{" ]]; then
              printf '%s' "${FIREBASE_GOOGLE_SERVICES_JSON}" > android/app/google-services.json
            else
              printf '%s' "${FIREBASE_GOOGLE_SERVICES_JSON}" | base64 -d > android/app/google-services.json
            fi
          else
            echo "::error::google-services.json is missing and no secret was provided."
            exit 1
          fi

      - name: Preflight sanity checks (fail fast)
        shell: bash
        run: |
          set -euo pipefail
          # 1) google-services.json package_name must match APPLICATION_ID
          PKG=$(grep -o '"package_name":[[:space:]]*"[^"]*"' android/app/google-services.json | sed 's/.*"package_name":[[:space:]]*"\([^"]*\)".*/\1/' | head -n1 || true)
          echo "google-services package_name = ${PKG:-<unknown>}"
          if [[ -z "${PKG:-}" || "$PKG" != "${APPLICATION_ID}" ]]; then
            echo "::error::Mismatch: APPLICATION_ID (${APPLICATION_ID}) != google-services package_name (${PKG:-<unknown>})"
            exit 1
          fi
          # 2) Manifest must NOT set package= on <manifest>
          if grep -R --line-number --include="AndroidManifest.xml" -E '^\s*<manifest[^>]*\spackage=' android/app/src ; then
            echo "::error::Remove package=\"...\" from <manifest> (namespace comes from app/build.gradle)"
            exit 1
          fi
          # 3) app/build.gradle must apply google services + namespace match
          APP_GRADLE="android/app/build.gradle"
          grep -q 'id "com.google.gms.google-services"' "$APP_GRADLE" || { echo "::error::Missing plugin id \"com.google.gms.google-services\" in android/app/build.gradle"; exit 1; }
          NS=$(grep -E '^\s*namespace\s*"' "$APP_GRADLE" | sed -E 's/.*"([^"]+)".*/\1/' | head -n1 || true)
          echo "namespace in app/build.gradle = ${NS:-<unknown>}"
          [[ "${NS:-}" == "${APPLICATION_ID}" ]] || { echo "::error::namespace (${NS:-<unknown>}) != APPLICATION_ID (${APPLICATION_ID})"; exit 1; }
          # 4) MainActivity path + package must match APPLICATION_ID
          MA_PATH="android/app/src/main/kotlin/${APPLICATION_ID//./\/}/MainActivity.kt"
          test -f "$MA_PATH" || { echo "::error::MainActivity.kt not found at $MA_PATH"; exit 1; }
          head -n1 "$MA_PATH"
          grep -q "^package ${APPLICATION_ID}\$" "$MA_PATH" || { echo "::error::First line of MainActivity.kt must be: 'package ${APPLICATION_ID}'"; exit 1; }
          echo "âœ… Preflight checks passed"

      - name: Build debug APKs (Flutter, verbose)
        run: |
          # -v gives full Gradle/AGP errors if anything goes wrong
          flutter build apk -v --debug --split-per-abi \
            --dart-define=API_BASE_URL="${{ env.API_BASE_URL }}" \
            --dart-define=DEEP_LINK_BASE="${{ env.DEEP_LINK_BASE }}"

      - name: List APKs
        run: |
          echo "== Flutter outputs =="
          ls -lh build/app/outputs/flutter-apk || true
          echo "== Gradle outputs =="
          find android/app/build/outputs -type f -name "*.apk" -print | sed 's|^|  |' || true

      - name: Upload APK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-debug
          path: |
            build/app/outputs/flutter-apk/*.apk
            android/app/build/outputs/apk/debug/*.apk
            android/app/build/outputs/apk/*/debug/*.apk
          if-no-files-found: error
          retention-days: 7
