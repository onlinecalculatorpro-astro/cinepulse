name: Android Debug (APK - manual)

on:
  workflow_dispatch:
    inputs:
      apiBase:
        description: "API base URL (e.g. https://api.onlinecalculatorpro.org)"
        required: false
        default: ""
      deepLinkBase:
        description: "Deep link base (e.g. https://cinepulse.netlify.app/#/s)"
        required: false
        default: ""
      applicationId:
        description: "Android applicationId / package (must match google-services.json)"
        required: false
        default: "api.onlinecalculatorpro.cinepulse"

env:
  API_BASE_URL: ${{ secrets.API_BASE_URL || inputs.apiBase || 'https://api.onlinecalculatorpro.org' }}
  DEEP_LINK_BASE: ${{ secrets.DEEP_LINK_BASE || inputs.deepLinkBase || 'https://cinepulse.netlify.app/#/s' }}
  APPLICATION_ID: ${{ secrets.ANDROID_APPLICATION_ID || inputs.applicationId || 'api.onlinecalculatorpro.cinepulse' }}
  FIREBASE_GOOGLE_SERVICES_JSON: ${{ secrets.FIREBASE_GOOGLE_SERVICES_JSON }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    concurrency:
      group: android-debug-${{ github.ref_name }}
      cancel-in-progress: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java (Temurin 17)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: "3.35.6"

      - name: Show versions
        run: |
          flutter --version
          dart --version
          java -version

      - name: flutter pub get
        run: flutter pub get

      - name: Write android/local.properties
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p android
          echo "sdk.dir=${ANDROID_SDK_ROOT:-${ANDROID_HOME}}" > android/local.properties
          FLUTTER_BIN="$(which flutter)"
          FLUTTER_SDK="$(dirname "$(dirname "$FLUTTER_BIN")")"
          echo "flutter.sdk=$FLUTTER_SDK" >> android/local.properties
          cat android/local.properties

      - name: Ensure google-services.json
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p android/app
          if [[ -f android/app/google-services.json ]]; then
            echo "google-services.json present."
          elif [[ -n "${FIREBASE_GOOGLE_SERVICES_JSON:-}" ]]; then
            if [[ "${FIREBASE_GOOGLE_SERVICES_JSON:0:1}" == "{" ]]; then
              printf '%s' "${FIREBASE_GOOGLE_SERVICES_JSON}" > android/app/google-services.json
            else
              printf '%s' "${FIREBASE_GOOGLE_SERVICES_JSON}" | base64 -d > android/app/google-services.json
            fi
            echo "google-services.json written from secret."
          else
            echo "::error::Missing android/app/google-services.json and no secret provided."
            exit 1
          fi
          PKG=$(grep -o '"package_name":[[:space:]]*"[^"]*"' android/app/google-services.json | sed 's/.*"package_name":[[:space:]]*"\([^"]*\)".*/\1/' | head -n1 || true)
          echo "google-services package_name = ${PKG:-<unknown>}"

      - name: Sanity checks (namespace/MainActivity/Manifest)
        shell: bash
        run: |
          set -euo pipefail
          NS=$(awk -F'"' '/^[[:space:]]*namespace[[:space:]]+/ {print $2}' android/app/build.gradle | head -n1 | tr -d '\r')
          echo "namespace in app/build.gradle = ${NS:-<none>}"
          if [[ -z "${NS:-}" ]]; then
            echo "::error::Could not find namespace in android/app/build.gradle"
            exit 1
          fi
          PKG_DIR="${NS//./\/}"
          EXPECTED="android/app/src/main/kotlin/${PKG_DIR}/MainActivity.kt"
          if [[ ! -f "$EXPECTED" ]]; then
            echo "::error::MainActivity.kt not found at $EXPECTED"
            echo "Candidates:"
            find android/app/src/main/kotlin -name MainActivity.kt -print || true
            exit 1
          fi
          if grep -q '<manifest[^>]*package=' android/app/src/main/AndroidManifest.xml; then
            echo "::error::Remove package=\"...\" from <manifest> (namespace handles it)."
            exit 1
          fi

      - name: Ensure Gradle wrapper executable
        shell: bash
        run: |
          set -euo pipefail
          if [[ ! -x android/gradlew ]]; then
            chmod +x android/gradlew || true
          fi
          test -x android/gradlew || { echo "::error::android/gradlew not found. Android template should include the wrapper."; exit 1; }

      - name: Build debug APK (Gradle)
        shell: bash
        run: |
          set -euo pipefail
          cd android
          ./gradlew --no-daemon --stacktrace --warning-mode=all \
            -PAPI_BASE_URL="${{ env.API_BASE_URL }}" \
            -PDEEP_LINK_BASE="${{ env.DEEP_LINK_BASE }}" \
            :app:assembleDebug
          echo "== APKs produced =="
          find app/build/outputs -type f -name "*.apk" -print | sed 's|^|  |'
          # Guard: fail if no APK found
          cnt=$(find app/build/outputs -type f -name "*.apk" | wc -l | tr -d ' ')
          if [[ "$cnt" -eq 0 ]]; then
            echo "::error::Gradle finished but no APK was found under android/app/build/outputs."
            exit 1
          fi

      - name: Upload APK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-debug
          path: |
            android/app/build/outputs/apk/debug/*.apk
            android/app/build/outputs/apk/*/debug/*.apk
          if-no-files-found: error
          retention-days: 7
